{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","useState","x","positionX","y","positionY","rotate","zIndex","position","setPos","appCSS","fontsize","borderRadius","transform","width","border","borderColor","color","transitionDuration","transitionTimingFunction","backdropFilter","backgroundColor","click","useCallback","e","document","elementFromPoint","clickX","pageX","clickY","pageY","clientRect","target","getBoundingClientRect","elementX","left","window","pageXOffset","elementY","top","pageYOffset","center","offsetWidth","offsetHeight","console","log","newPos","onClick","style","val","Boolean","location","hostname","match","Hello","count","setCount","handleClick","useMemo","scrollCheck","innerHeight","useEffect","addEventListener","removeEventListener","StrictMode","display","flexWrap","jsxList","Array","i","push","key","AppList","ReactDOM","render","onScrollCapture","StrLabel","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iOA2DeA,G,WAtDuE,SAACC,GAAW,IAAD,EAClEC,mBAAS,CAACC,EAAEF,EAAMG,UAAUC,EAAEJ,EAAMK,UAAUC,OAAO,EAAEC,OAAO,IADI,mBACtFC,EADsF,KAC5EC,EAD4E,KAEvFC,EAAS,CACXC,SAAU,GACVC,aAAa,EACbC,UAAU,eAAD,OAAiBL,EAASN,EAA1B,eAAkCM,EAASJ,EAA3C,wBAA4DI,EAASF,OAArE,QACTQ,MAAM,IACNP,OAAOC,EAASD,OAChBQ,OAAO,YACPC,YAAYhB,EAAMiB,MAClBT,SAAS,WACTU,mBAAmB,KACnBC,yBAAyB,WACzBC,eAAe,YACfC,gBAAgB,iBAEdC,EAAQC,uBAAY,SAACC,GAGbC,SAASC,iBAFX,IACA,KADR,IAGIC,EAASH,EAAEI,MACXC,EAASL,EAAEM,MAEXC,EAAaP,EAAEQ,OAAOC,wBAKtBC,EAAkBP,GAJNI,EAAWI,KAAOC,OAAOC,aAKrCC,EAAkBT,GAJNE,EAAWQ,IAAMH,OAAOI,aAMpCC,EACEjB,EAAEQ,OAAOU,YAAY,EADvBD,EAEEjB,EAAEQ,OAAOW,aAAa,EAE5BC,QAAQC,IAAIrB,EAAEQ,OAAOU,aACrB,IAAII,EAAS,CACT5C,EAAwB,GAAnBuC,EAASP,GACd9B,EAAwB,GAAnBqC,EAASH,GACdhC,OAA2B,IAAnBmC,EAASH,GACjB/B,OAAOC,EAASD,OAAO,GAE3BE,EAAOqC,KACT,CAACtC,IAEH,OACQ,4BAAQuC,QAASzB,EAAO0B,MAAOtC,GAC3B,2DACcV,EAAMiD,IADpB,yBCxCIC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAwC,SAACtD,GAAW,IAAD,EAC3BC,mBAAS,KADkB,mBAC9CsD,EAD8C,KACvCC,EADuC,KAG/CC,GADOC,mBAAQ,kBAAMH,IAAO,CAACA,IACfhC,uBAAY,WAC5BiC,EAASD,EAAQ,KAClB,CAACA,KACEI,EAAc,WACZvB,OAAOI,YAAcJ,OAAOwB,YAAc,IAC1CJ,EAASD,EAAQ,IAErBX,QAAQC,IAAIT,OAAOI,YAAcJ,OAAOwB,cAM5CC,qBAAU,WAEN,OADApC,SAASqC,iBAAiB,SAAUH,GAC7B,kBAAYlC,SAASsC,oBAAoB,SAAUJ,OAS9D,OACI,kBAAC,IAAMK,WAAP,KACQ,4BAAQjB,QAASU,GAAjB,kBACJ,yBAAKT,MAlBG,CACZiB,QAAQ,OACRC,SAAS,SAMG,WAEZ,IADA,IAAIC,EAAgC,IAAIC,MAAM,GACrCC,EAAY,EAAGA,EAAId,EAAOc,IAC/BF,EAAQG,KAAK,kBAAC,EAAD,CAAKrD,MAAK,cAASoD,EAAE,GAAX,cAA2BlE,UAAW,EAAGE,UAAW,EAAGkE,IAAKF,EAAGpB,IAAKoB,KAE/F,OAAOF,EAMEK,MAMjBC,IAASC,OACL,kBAAC,IAAMV,WAAP,KACI,yBAAKW,gBALb,WACI/B,QAAQC,IAAIT,OAAOI,YAAcJ,OAAOwB,gBAKpC,kBAAC,EAAD,CAAOgB,SAAU,WAErBnD,SAASoD,eAAe,SD2FtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.44aa738d.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Simulate} from \"react-dom/test-utils\";\n\nconst App: React.FC<{ color: string,positionX:number,positionY:number ,val:number}> = (props) => {\n    const [position, setPos] = useState({x:props.positionX,y:props.positionY,rotate:0,zIndex:0});\n    const appCSS = {\n        fontsize: 24,\n        borderRadius:5,\n        transform: `translate3d(${position.x}px, ${position.y}px,0) rotate(${position.rotate}deg)`,\n        width:300,\n        zIndex:position.zIndex,\n        border:'solid 2px',\n        borderColor:props.color,\n        position:'relative',\n        transitionDuration:\"2s\",\n        transitionTimingFunction:\"ease-out\",\n        backdropFilter:\"blur(2px)\",\n        backgroundColor:\"rgba(0,0,0,0)\"\n    } as React.CSSProperties;\n    const click = useCallback((e)=>{\n        let X = 100;\n        let Y = 100;\n        let elm = document.elementFromPoint(X, Y);\n        let clickX = e.pageX ;\n        let clickY = e.pageY ;\n        // 要素の位置を取得\n        let clientRect = e.target.getBoundingClientRect() ;\n        let positionX = clientRect.left + window.pageXOffset ;\n        let positionY = clientRect.top + window.pageYOffset ;\n\n        // 要素内におけるクリック位置を計算\n        let elementX:number = clickX - positionX ;\n        let elementY:number = clickY - positionY ;\n\n        let center = {\n            x:e.target.offsetWidth/2,\n            y:e.target.offsetHeight/2\n        }\n        console.log(e.target.offsetWidth);\n        let newPos = {\n            x : (center.x-elementX)*5,\n            y : (center.y-elementY)*5,\n            rotate:(center.y-elementY)*10,\n            zIndex:position.zIndex+1\n        }\n        setPos(newPos);\n    },[position]);\n\n    return (\n            <button onClick={click} style={appCSS}>\n                <p>\n                    reactを触った{props.val}日目！\n                </p>\n            </button>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {FC, ReactElement, useCallback, useEffect, useMemo, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Hello: React.FC<{ StrLabel: String }> = (props) => {\n    const [count, setCount] = useState(1000);\n    const left = useMemo(() => count, [count]);\n    const handleClick = useCallback(() => {\n        setCount(count + 1);\n    }, [count]);\n    const scrollCheck = () => {\n        if (window.pageYOffset / window.innerHeight > 0.4) {\n            setCount(count + 10);\n        }\n        console.log(window.pageYOffset / window.innerHeight);\n    };\n    const indexCSS ={\n        display:\"flex\",\n        flexWrap:\"wrap\"\n    } as React.CSSProperties;\n    useEffect(() => {\n        document.addEventListener(\"scroll\", scrollCheck);\n        return (): void => document.removeEventListener(\"scroll\", scrollCheck);\n    });\n    const AppList = () => {\n        let jsxList: React.ReactElement[] = new Array(1);\n        for (let i: number = 0; i < count; i++) {\n            jsxList.push(<App color={`hsl(${i/10},100%,50%)`} positionX={0} positionY={0} key={i} val={i}/>)\n        }\n        return jsxList;\n    }\n    return (\n        <React.StrictMode>\n                <button onClick={handleClick}>+1する</button>\n            <div style={indexCSS}>\n                {AppList()}</div>\n        </React.StrictMode>)\n}\nfunction scrollCheck(){\n    console.log(window.pageYOffset / window.innerHeight);\n}\nReactDOM.render(\n    <React.StrictMode>\n        <div onScrollCapture={scrollCheck}></div>\n        <Hello StrLabel={\"react\"}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}