{"version":3,"sources":["StandardElement.tsx","BombedElement.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StandardElemet","props","useState","x","y","rotate","zIndex","position","setPos","useMemo","bumbedPack","isBombed","newPos","Math","random","dispatch","appCSS","fontsize","borderRadius","transform","width","border","borderColor","val","transitionDuration","transitionTimingFunction","backdropFilter","backgroundColor","ref","useRef","click","useCallback","e","clickX","pageX","clickY","pageY","current","clientRect","getBoundingClientRect","elementX","left","window","pageXOffset","elementY","top","pageYOffset","center","target","offsetWidth","offsetHeight","console","log","onClick","style","currentCountState","BombedElement","isVisible","setNone","isNone","visibility","pointerEvents","setBombed","App","Boolean","location","hostname","match","Hello","count","setCount","setTimeout","forAppListCount","handleClick","useReducer","currentState","addState","scrollCheck","innerHeight","useEffect","document","addEventListener","removeEventListener","StrictMode","display","flexWrap","justifyContent","jsxList","Array","i","push","key","AppList","ReactDOM","render","onScrollCapture","StrLabel","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.33903ad2.chunk.js","sourcesContent":["import React, {useCallback, useMemo, useRef, useState} from 'react';\r\nimport './App.css';\r\n\r\nconst StandardElemet: React.FC<{ val: number, dispatch: React.Dispatch<number>, currentCountState: number, bumbedPack: {isBombed: boolean, setBombed: React.Dispatch<React.SetStateAction<boolean>>}}> = (props) => {\r\n    const [position, setPos] = useState({x: 0, y: 0, rotate: 0, zIndex: 0});\r\n\r\n    useMemo(() =>{\r\n        if(props.bumbedPack.isBombed){\r\n            let newPos = {\r\n                x:  (Math.random()-0.5)*1000 + position.x,\r\n                y:  Math.random()*1000+1000 + position.y,\r\n                rotate: (Math.random()-0.5)*360 + position.rotate,\r\n                zIndex: position.zIndex + 1\r\n            }\r\n            props.dispatch(1);\r\n            setPos(newPos);\r\n        }\r\n    }, [props.bumbedPack.isBombed]);\r\n    const appCSS = {\r\n        fontsize: 24,\r\n        borderRadius: 5,\r\n        transform: `translate3d(${position.x}px, ${position.y}px,0) rotate(${position.rotate}deg)`,\r\n        width: 300,\r\n        zIndex: position.zIndex,\r\n        border: 'solid 2px',\r\n        borderColor: `hsl(${props.val / 10},100%,50%)`,\r\n        position: 'relative',\r\n        transitionDuration: \"2s\",\r\n        transitionTimingFunction: \"ease-out\",\r\n        backdropFilter: \"blur(2px)\",\r\n        backgroundColor: `hsla(${props.val / 10},100%,90%,0.2)`\r\n    } as React.CSSProperties;\r\n    const ref = useRef<null | HTMLButtonElement>(null);\r\n    const click = useCallback((e) => {\r\n        let clickX = e.pageX;\r\n        let clickY = e.pageY;\r\n        // 要素の位置を取得\r\n        if (ref.current !== null) {\r\n            let clientRect = ref.current.getBoundingClientRect();\r\n            let positionX = clientRect.left + window.pageXOffset;\r\n            let positionY = clientRect.top + window.pageYOffset;\r\n\r\n            // 要素内におけるクリック位置を計算\r\n            let elementX: number = clickX - positionX;\r\n            let elementY: number = clickY - positionY;\r\n\r\n            let center = {\r\n                x: e.target.offsetWidth / 2,\r\n                y: e.target.offsetHeight / 2\r\n            }\r\n            console.log(e.target.offsetWidth);\r\n            let newPos = {\r\n                x: (center.x - elementX) * 5,\r\n                y: (center.y - elementY) * 5,\r\n                rotate: (center.y - elementY) * -(center.x - elementX) * 0.7,\r\n                zIndex: position.zIndex + 1\r\n            }\r\n            props.dispatch(1);\r\n            setPos(newPos);\r\n        }\r\n    }, [position,props]);\r\n\r\n    return (\r\n        <button onClick={click} style={appCSS} ref={ref}>\r\n            <p>\r\n                {props.currentCountState}\r\n            </p>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default StandardElemet;","import React, {useCallback, useMemo, useRef, useState} from 'react';\r\nimport './App.css';\r\n\r\nconst BombedElement: React.FC<{ val: number, dispatch: React.Dispatch<number>, currentCountState: number, bumbedPack: {isBombed: boolean, setBombed: React.Dispatch<React.SetStateAction<boolean>>}}> = (props) => {\r\n    const [position, setPos] = useState({x: 0, y: 0, rotate: 0, zIndex: 0});\r\n    const [isVisible,setNone] = useState('visible');\r\n    const isNone = useMemo(()=>{\r\n        if(isVisible==='hidden'){\r\n            return 'none';\r\n        }else{\r\n            return 'inherit'\r\n        }\r\n    },[isVisible]);\r\n    useMemo(() =>{\r\n        if(props.bumbedPack.isBombed){\r\n            props.dispatch(1);\r\n        }\r\n\r\n    }, [props.bumbedPack.isBombed]);\r\n    const appCSS = {\r\n        fontsize: 24,\r\n        borderRadius: 5,\r\n        transform: `translate3d(${position.x}px, ${position.y}px,0) rotate(${position.rotate}deg)`,\r\n        width: 300,\r\n        zIndex: position.zIndex,\r\n        border: 'solid 2px',\r\n        borderColor: `hsl(19, 100%, 22%)`,\r\n        position: 'relative',\r\n        transitionTimingFunction: \"ease-out\",\r\n        backdropFilter: \"blur(2px)\",\r\n        backgroundColor: `hsl(26, 100%, 31%)`,\r\n        visibility:isVisible,\r\n        pointerEvents:isNone\r\n    } as React.CSSProperties;\r\n    const ref = useRef<null | HTMLButtonElement>(null);\r\n    const click = useCallback(() => {\r\n        props.bumbedPack.setBombed(true);\r\n        setNone('hidden');\r\n    }, [props]);\r\n\r\n    return (\r\n        <button onClick={click} style={appCSS} ref={ref}>\r\n            <p>\r\n                {props.currentCountState}\r\n            </p>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default BombedElement;","import React from 'react';\nimport './App.css';\nimport StandardElemet from \"./StandardElement\";\nimport BombedElement from \"./BombedElement\";\n\nconst App: React.FC<{ val: number, dispatch: React.Dispatch<number>, currentCountState: number ,bumbedPack: {isBombed: boolean, setBombed: React.Dispatch<React.SetStateAction<boolean>>}}> = (props) => {\n    if(props.val%1000===0&&props.val>2000){\n        return <BombedElement val={props.val} dispatch={props.dispatch} currentCountState={props.currentCountState} bumbedPack={props.bumbedPack}/>\n    }\n    return (\n        <StandardElemet val={props.val} dispatch={props.dispatch} currentCountState={props.currentCountState} bumbedPack={props.bumbedPack}/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useCallback, useEffect, useMemo, useReducer, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst Hello: React.FC<{ StrLabel: String }> = (props) => {\n    const [count, setCount] = useState(500);\n    const [isBombed,setBombed] = useState(false);\n    const bumbedPack = {\n        isBombed:isBombed,\n        setBombed:setBombed\n    };\n    useMemo(() =>{\n        if(bumbedPack.isBombed){\n            window.setTimeout( ()=>{\n                setBombed(false);\n            }, 2000 );\n        }\n    }, [bumbedPack.isBombed]);\n    const forAppListCount = useMemo(() => count - 500, [count]);\n    const handleClick = useCallback(() => {\n        setCount(count + 1);\n    }, [count]);\n    const [currentCountState, dispatch] = useReducer(updateClickedCount, 0);\n\n    function updateClickedCount(currentState: number, addState: number): number {\n        return currentState + addState;\n    }\n\n    const scrollCheck = () => {\n        if (window.pageYOffset / window.innerHeight > 2.0) {\n            setCount(count + 100);\n        }\n    };\n    const indexCSS = {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n    } as React.CSSProperties;\n    useEffect(() => {\n        document.addEventListener(\"scroll\", scrollCheck);\n        return (): void => document.removeEventListener(\"scroll\", scrollCheck);\n    });\n    const AppList = () => {\n        let jsxList: React.ReactElement[] = new Array(1);\n        for (let i = forAppListCount; i < count; i++) {\n            jsxList.push(<App key={i} val={i} dispatch={dispatch} currentCountState={currentCountState} bumbedPack={bumbedPack}/>)\n        }\n        return jsxList;\n    }\n    return (\n        <React.StrictMode>\n            <button onClick={handleClick}>+1する</button>\n            <div style={indexCSS}>\n                {AppList()}\n            </div>\n        </React.StrictMode>)\n}\n\nfunction scrollCheck() {\n    console.log(window.pageYOffset / window.innerHeight);\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <div onScrollCapture={scrollCheck}/>\n        <Hello StrLabel={\"react\"}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}